/*
 * Copyright 2020-2022 the original author or authors.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      https://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

plugins {
    id 'org.springframework.boot' version '2.4.5'
    id 'io.spring.dependency-management' version '1.0.11.RELEASE'
    id 'application'
    id "com.github.ManifestClasspath" version "0.1.0-RELEASE"
}

ext {
    // Itt will be used to prefix docker image name
    set('imagePrefix', 'camundastudy')
    set('springCloudVersion', "2020.0.2")
    set('spvitaminVersion', '1.3.5-RELEASE')
}

sourceCompatibility = 11

apply from: '../gradle/common.gradle'
apply from: '../gradle/docker.gradle'


repositories {
    jcenter()
    mavenCentral()
}


application {
    mainClassName = 'hu.perit.orchestrator.Application'
    // Some JVM options already set in common.gradle
    applicationDefaultJvmArgs += ['-Xmx512m', '-Xms32m']
}


dependencies {
    //compile project(':spvitamin-core')
    //compile project(':spvitamin-spring-server')
    //compile project(':spvitamin-spring-admin')
    //compile project(':spvitamin-spring-logging')
    //compile project(':spvitamin-spring-security')
    //compile project(':spvitamin-spring-data')

    implementation 'hu.perit.spvitamin:spvitamin-core'
    implementation 'hu.perit.spvitamin:spvitamin-spring-server'
    implementation 'hu.perit.spvitamin:spvitamin-spring-admin'
    implementation 'hu.perit.spvitamin:spvitamin-spring-logging'
    implementation 'hu.perit.spvitamin:spvitamin-spring-security'
    implementation 'hu.perit.spvitamin:spvitamin-spring-data'

    // Lombok
    compileOnly 'org.projectlombok:lombok'
    testCompileOnly 'org.projectlombok:lombok'
    integtestCompileOnly 'org.projectlombok:lombok'
    annotationProcessor 'org.projectlombok:lombok'
    testAnnotationProcessor 'org.projectlombok:lombok'
    integtestAnnotationProcessor 'org.projectlombok:lombok'

    // Spring Boot
    implementation 'org.springframework.boot:spring-boot-starter-web'
    implementation 'org.springframework.boot:spring-boot-starter-data-jpa'
    implementation 'org.springframework.boot:spring-boot-starter-security'
    implementation 'org.springframework.boot:spring-boot-starter-thymeleaf'
    implementation 'org.springframework.boot:spring-boot-starter-validation'
    implementation 'org.springframework.boot:spring-boot-starter-actuator'


    // JJWT
    implementation group: 'io.jsonwebtoken', name: 'jjwt', version: '0.9.1'

    // Swagger
    implementation "io.springfox:springfox-boot-starter:3.0.0"
    implementation "io.springfox:springfox-swagger-ui:3.0.0"

    // apache.commons
    implementation group: 'org.apache.commons', name: 'commons-lang3', version: '3.10'

    // Validation
    implementation 'javax.validation:validation-api'

    // ModelMapper
    implementation group: 'org.modelmapper.extensions', name: 'modelmapper-spring', version: '2.3.5'

    // Micrometer Prometheus plugin
    implementation group: 'io.micrometer', name: 'micrometer-registry-prometheus', version: '1.5.3'

    // Camunda
    implementation 'org.camunda.bpm.springboot:camunda-bpm-spring-boot-starter-rest:7.15.0'
    implementation 'org.camunda.bpm.springboot:camunda-bpm-spring-boot-starter-webapp:7.15.0'

    // H2
    implementation 'com.h2database:h2'


    // Test framework
    testImplementation('org.springframework.boot:spring-boot-starter-test') {
        exclude group: 'org.junit.vintage', module: 'junit-vintage-engine'
    }

    testImplementation 'org.springframework.security:spring-security-test'

    compile group: 'org.junit.platform', name: 'junit-platform-commons', version: '1.7.0'
}


dependencyManagement {
    imports {
        mavenBom "org.springframework.cloud:spring-cloud-dependencies:${springCloudVersion}"
        mavenBom "hu.perit.spvitamin:spvitamin-dependencies:${spvitaminVersion}"
    }
}


test {
    useJUnitPlatform()
}


dockerImage() {
    dependsOn 'dockerBackendImage'
}
